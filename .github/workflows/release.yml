name: Publish static assets and Docker image

on:
  workflow_dispatch:
  release:
    types:
      - published

jobs:
  query-metadata:
    runs-on: ubuntu-latest

    outputs:
      release-id: ${{ steps.query-release-id.outputs.result }}
      tag-name: ${{ steps.query-tag-name.outputs.result }}

    steps:
      - name: Query release id
        id: query-release-id
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
            });
            return data.id;

      - name: Query tag name
        id: query-tag-name
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const { data } = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
            });
            const { tag_name } = data;
            return tag_name.startsWith("v") ? tag_name.slice(1) : tag_name;

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup nodejs
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: yarn

      - name: Install dependencies
        run: yarn install

      - name: Build
        run: yarn export

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: assets
          path: ./out

  publish-assets:
    runs-on: ubuntu-latest

    needs:
      - query-metadata
      - build

    # permissions:
    #   contents: write

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: assets
          path: ./out

      - name: Create archive
        run: tar -zcf assets.tar.gz -C ./out ./

      - name: Publish
        uses: actions/github-script@v7
        env:
          RELEASE_ID: ${{ needs.query-metadata.outputs.release-id }}
        with:
          script: |
            const fs = require("node:fs");

            github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: process.env.RELEASE_ID,
                name: "assets.tar.gz",
                data: fs.readFileSync("assets.tar.gz"),
            });

  publish-image:
    runs-on: ubuntu-latest

    needs:
      - query-metadata
      - build

    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: docker-meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/next-chat
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.query-metadata.outputs.tag-name }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: assets
          path: ./out

      - name: Create Caddyfile
        run: |
          cat >./Caddyfile <<EOF
          {
          	servers {
          		trusted_proxies static private_ranges
          	}
          }

          :80 {
          	handle_errors {
          		respond /404.html 404
          	}

          	handle {
          		root * /app/www
          		try_files {path} {path}.html {path}/index.html =404
          		file_server
          	}
          }
          EOF

      - name: Create Dockerfile
        run: |
          cat >./Dockerfile <<EOF
          FROM caddy:alpine

          WORKDIR /app

          COPY ./out ./www
          COPY ./Caddyfile ./conf/Caddyfile

          EXPOSE 80

          CMD ["caddy", "run", "--config", "/app/conf/Caddyfile"]
          EOF

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./
          push: true
          tags: ${{ steps.docker-meta.outputs.tags }}
